{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Assignment 3: Classification with Logistic Regression  [ __ /130  marks]\n",
    "\n",
    "<hr>\n",
    "<!-- <img src=https://www.tibco.com/sites/tibco/files/media_entity/2020-09/logistic-regression-diagram.svg width=600> -->\n",
    "<img src=https://miro.medium.com/max/1838/1*wWRGcsBwoXw-WNJi5UpoOw.png width=600>\n",
    "<hr>\n",
    "\n",
    "In this assignment we will consider the `diabetes` dataset from kaggle: https://www.kaggle.com/kandij/diabetes-dataset\n",
    "\n",
    "We will use logistic regression to classify subjects based on the input features; we will also evaluate our model with/without regularization."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Before you start...\n",
    "* check out the relevant lecture code (L3_codeF.ipynb) for reference"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Before you submit...\n",
    "* restart the kernel, then re-run the whole notebook to ensure no errors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import confusion_matrix, roc_curve, precision_recall_curve, auc\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Question 1.1 [ _ /4 marks]\n",
    "\n",
    "Read the file `diabetes.csv` into a pandas DataFrame. Display the first 5 rows of the DataFrame. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# ****** your code here ******\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Question 1.2 [ _ /10 marks]\n",
    "\n",
    "Please answer the following short-answer questions `(a-d)`. Your answer can be brief (a few words or a sentence)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(a) How many input features does this dataset have?**  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Your answer:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(b) What is the dependent variable?** "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Your answer:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(c) How many classes are there?**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Your answer:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(d) Is the dataset class-balanced? Check with some code.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ****** your code here ******"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Your answer:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Question 1.3 [ _ /12 marks]\n",
    "\n",
    "Split the data into train and test sets: Use `train_test_split` with `random_state=0`. Use 50% of the data for training and 50% for testing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Store the input values into a variable called \"X\" [ /4 marks]\n",
    "# ****** your code here ******\n",
    "\n",
    "\n",
    "# Convert 0's and 1's to \"Pos\" and \"Neg\" class labels. Store the output class values into variable \"y\" [ /6 marks]\n",
    "# ****** your code here ******\n",
    "\n",
    "\n",
    "\n",
    "# Split your X and y data using train_test_split [ /2 marks]\n",
    "# ****** your code here ******"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Question 1.4 [ _ /16 marks]\n",
    "\n",
    "Consider sklearn's `LogisticRegression` class. Create a `LogisticRegression` object with `penalty=none`. Train and test this classifier using \"Insulin\" as the independent variable and \"Outcome\" as the dependent variable. Make a scatter plot of the points. Plot your prediction on the same graph."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a LogisticRegression object without regularization [ /2 marks]\n",
    "# ****** your code here ******\n",
    "\n",
    "# Create training data and test data for X [ /4 marks]\n",
    "# ****** your code here ******\n",
    "\n",
    "\n",
    "# Fit to your training data using Logistic Regression [ /2 marks]\n",
    "# ****** your code here ******\n",
    "\n",
    "\n",
    "# Create a scatter plot of the test data. Also plot your prediction. [ /8 marks]\n",
    "# ****** your code here ******\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Question 1.5 [ _ /12 marks]\n",
    "\n",
    "How many True Positives (TP), True Negatives (TN), False Negatives (FN), and False Positives (FP) were there from your classification test results in question 1.4? What was the test accuracy of your classifier? You can use the following formula:\n",
    "\n",
    "$$Accuracy = \\frac{TP + TN}{TP + TN + FP + FN}$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculate tp, tn, fp, fn, and test accuracy\n",
    "# ****** your code here ******\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Question 1.6 [ _ /18 marks]\n",
    "\n",
    "Now try adjusting the decision threshold to 0.35 (instead of the default, which is 0.5). Report TP, TN, FP, FN, and Accuracy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Using your fit from question 1.4, adjust the decision threshold and get the updated predictions [ /6 marks]\n",
    "# ****** your code here ******\n",
    "\n",
    "\n",
    "# Calculate tp, tn, fp, fn, and test accuracy [ /12 marks]\n",
    "# ****** your code here ******\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Question 1.7 [ _ /6 marks]\n",
    "\n",
    "What happens when the threshold is lowered from question 1.5 to question 1.6? Could one model be more useful than the other? Answer in a few sentences."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Your answer: "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Question 1.8 [ _ /18 marks]\n",
    "\n",
    "Create another `LogisticRegression` object with `penalty=none`. Train and test this classifier, this time using all input features. Calculate TP, FP, TN, FN, and Accuracy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a LogisticRegression object without regularization [ /2 marks]\n",
    "# ****** your code here ******\n",
    "\n",
    "# Fit to your training data using Logistic Regression [ /2 marks]\n",
    "# ****** your code here ******\n",
    "\n",
    "# Compute your test predictions, given the test inputs [ /2 marks]\n",
    "# ****** your code here ******\n",
    "\n",
    "# Calculate tp, tn, fp, fn, and test accuracy [ /12 marks]\n",
    "# ****** your code here ******\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Question 1.9 [ _ /20 marks]\n",
    "\n",
    "Create a final `LogisticRegression` object with `penalty=l2`, `C=0.01`. Train and test this classifier using all input features. Calculate TP, FP, TN, FN, and Accuracy. Did regularization help in this case? "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a LogisticRegression object with l2 regularization [ /2 marks]\n",
    "# ****** your code here ******\n",
    "\n",
    "# Fit to your training data using Logistic Regression [ /2 marks]\n",
    "# ****** your code here ******\n",
    "\n",
    "# Compute your test predictions, given the test inputs [ /2 marks]\n",
    "# ****** your code here ******\n",
    "\n",
    "# Calculate tp, tn, fp, fn, and test accuracy [ /12 marks]\n",
    "# ****** your code here ******\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Your answer: \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Question 2.1 [ _ /14 marks]\n",
    "\n",
    "Plot ROC Curves for the classifiers you used in questions 1.4, 1.8, and 1.9. Use AUC to determine which classifier is the best. State the best classifier."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Use roc_curve to get FPR and TPR for each of the 3 classifiers [ /6 marks]\n",
    "# ****** your code here ******\n",
    "\n",
    "\n",
    "\n",
    "# Plot all of the ROC curves [ /3 marks]\n",
    "# ****** your code here ******\n",
    "\n",
    "\n",
    "\n",
    "# Determine AUC for each of the ROC curves [ /3 marks]\n",
    "# ****** your code here ******"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Your answer: "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
